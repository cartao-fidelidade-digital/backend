spring.application.name=apiClubee
spring.datasource.driver-class-name=org.postgresql.Driver

#Conexao com banco de dados
spring.datasource.url=${POSTGRES_URL}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

#JWT CONFIG
jwt.private.key=classpath:app.key
jwt.public.key=classpath:app.pub

# Access Token (15 minutos)
jwt.token.expiry=900

# Refresh Token (7 dias)
jwt.token.refresh.expiry=604800

# EMAIL
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=clubee.suporte@gmail.com
spring.mail.password=xjil hjev jawf gczg
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# RABBITMQ CONFIG
spring.rabbitmq.host=${RABBIT_HOST}
spring.rabbitmq.port=${RABBIT_PORT}
spring.rabbitmq.username=${RABBIT_USER}
spring.rabbitmq.password=${RABBIT_PASSWORD}

# RABBITMQ Config de consumidores
spring.rabbitmq.listener.simple.acknowledge-mode=manual
spring.rabbitmq.listener.simple.prefetch=10
spring.rabbitmq.listener.simple.retry.enabled=true
spring.rabbitmq.listener.simple.retry.initial-interval=100
spring.rabbitmq.listener.simple.retry.max-attempts=5
spring.rabbitmq.listener.simple.retry.max-interval=10000
spring.rabbitmq.listener.simple.retry.multiplier=2

# RABBITMQ fila
email.exchange.name=emailExchange
email.password.queue.name=emailPasswordQueue
email.password.routing.key=emailPasswordRoutingKey

#POOL DE CONEXAO
spring.datasource.hikari.connection-timeout = 20000
spring.datasource.hikari.minimum-idle= 10
spring.datasource.hikari.maximum-pool-size= 40
spring.datasource.hikari.idle-timeout=10000
spring.datasource.hikari.auto-commit =true

# SWAGGER CONFIG
springdoc.swagger-ui.path=/api-docs

#OBS: Comando para geracao de chave privada para "app.key": $ openssl genpkey -out private_key.pem -algorithm RSA -pkeyopt rsa_keygen_bits:2048
#OBS: Comando para geracao de chave publica para "app.pub": $ openssl rsa -pubout -in private_key.pem -out public_key.pem